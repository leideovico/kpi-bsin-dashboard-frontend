import React, { useState, useEffect } from 'react';
import "../Styles/saved-table.css";

const SavedSafetyTable = () => {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState('S');
  const [filteredItems, setFilteredItems] = useState([]);
  const [selectedYears, setSelectedYears] = useState([]);
  const [availableYears, setAvailableYears] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [searchName, setSearchName] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState({});
  const [lastRowId, setLastRowId] = useState(0);

  const handleSaveData = async (item_id) => {
    const authToken = localStorage.getItem('authToken');
  
    try {
      const formattedData = {
        Item_ID: item_id,
        Name: editedData.Name,
        Results: editedData.Results.map(result => ({
          Name: result.Name,
          Result_ID: result.Result_ID,
          Factors: result.Factors.map(factor => ({
            Factor_ID: factor.Factor_ID,
            Title: factor.Title,
            Unit: factor.Unit,
            Target: factor.Target,
            Planned: factor.Planned,
            Actual: factor.Actual
          }))
        })),
        Year: editedData.Year
      };
  
      const isNewData = !items.some(item => item.Item_ID === item_id);
      const method = isNewData ? 'POST' : 'PUT';
      const url = isNewData
        ? `http://localhost:8080/kpi/item`
        : `http://localhost:8080/kpi/item/entire/${item_id}`;
  
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          "Authorization": `Bearer ${authToken}`
        },
       
        body: JSON.stringify(formattedData)
      });
  
      if (response.ok) {
        alert('Data updated successfully');
        setIsEditing(false);
        const updatedItems = isNewData
          ? [...items, formattedData]
          : items.map(item => item.Item_ID === item_id ? formattedData : item);
        setItems(updatedItems);
      } else {
        const errorText = await response.text();
        console.error('Failed to update data:', errorText);
        alert(`Failed to update data: ${errorText}`);
      }
  
    } catch (error) {
      console.error('Error updating data:', error);
    }
  };

  const handleAddRowClick = (year) => {
    const newRowId = lastRowId + 1;
    setLastRowId(newRowId);
  
    // Membuat baris baru dengan data default
    const newRow = {
      Result_ID: newRowId,
      Name: "",
      Factors: [
        {
          Title: "",
          Unit: "",
          Target: "",
          Planned: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          },
          Actual: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          }
        }
      ],
      Year: year
    };
  
    // Menambahkan baris baru ke data yang sedang diedit, hanya jika tahunnya cocok
    setEditedData(prevData => {
      // Mengecek apakah tahun pada data yang sedang diedit sama dengan tahun yang dipilih
      if (prevData.Year === year) {
        return {
          ...prevData,
          Results: [...prevData.Results, newRow]
        };
      } else {
        // Jika tahunnya tidak cocok, tidak ada perubahan yang dibuat
        return prevData;
      }
    });
  
    // Juga tambahkan baris baru ke filteredItems
    setFilteredItems(prevFilteredItems => {
      return prevFilteredItems.map(item => {
        if (item.Year === year) {
          return {
            ...item,
            Results: [...item.Results, newRow]
          };
        }
        return item;
      });
    });
  };

  const handleChange = (e, resultIndex, factorIndex, type, month) => {
    const { value } = e.target;
    const numericValue = parseFloat(value);
  
    if (!isNaN(numericValue)) {
      setEditedData(prevData => {
        const newData = JSON.parse(JSON.stringify(prevData));
        if (!newData.Results[resultIndex].Factors[factorIndex][type]) {
          newData.Results[resultIndex].Factors[factorIndex][type] = { Monthly: [{}] };
        } else if (!newData.Results[resultIndex].Factors[factorIndex][type].Monthly) {
          newData.Results[resultIndex].Factors[factorIndex][type].Monthly = [{}];
        }
        newData.Results[resultIndex].Factors[factorIndex][type].Monthly[0][month] = numericValue;
        return newData;
      });
    }
  };
  
  const handleNameChange = (e) => {
    setSearchName(e.target.value);
  };

  useEffect(() => {
    fetch('http://localhost:8080/kpi/item')
      .then(response => response.json())
      .then(data => {
        console.log('Response JSON (item):', data);
        setItems(data.data); 
        if (data.data.length > 0) {
          setSelectedItem(data.data[0].Name);
          const years = Array.from(new Set(data.data.map(item => item.Year)));
          setAvailableYears(years);
        }
      })
      .catch(error => {
        console.error('Error fetching item data:', error);
      });
  }, []);

  useEffect(() => {
    const filtered = items.filter(item =>
      item.Name === selectedItem &&
      (selectedYears.length === 0 || selectedYears.includes(item.Year)) &&
      (item.Results.some(result => result.Name.toLowerCase().includes(searchName.toLowerCase())))
    );
    setFilteredItems(filtered);
  }, [selectedItem, selectedYears, items, searchName]);

  const handleYearChange = (year) => {
    setSelectedYears(prevSelectedYears =>
      prevSelectedYears.includes(year)
        ? prevSelectedYears.filter(y => y !== year)
        : [...prevSelectedYears, year]
    );
  };

  const handleResetFilters = () => {
    setSelectedYears([]);
    setSearchName('');
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

const handleUpdateData = (itemIndex, year) => {
  setIsEditing(true);
  const dataToEdit = items.find(item => item.Year === year); // Ambil data dari 'items' bukan 'filteredItems'
  console.log('Data to be updated:', dataToEdit); // This will log the item data to be edited
  setEditedData({ ...dataToEdit });
};


  
// Dalam komponen SavedSafetyTable
const handleDeleteRowClick = async (item_id) => {
  const authToken = localStorage.getItem('authToken');

  try {
    const response = await fetch(`http://localhost:8080/kpi/item/entire/${item_id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": `Bearer ${authToken}`
      }
    });

    if (response.ok) {
      alert('Row deleted successfully');
      // Hapus baris dari state filteredItems
      setFilteredItems(prevFilteredItems => prevFilteredItems.filter(item => item.Item_ID !== item_id));
      // Hapus baris dari state items
      setItems(prevItems => prevItems.filter(item => item.Item_ID !== item_id));
    } else {
      const errorText = await response.text();
      console.error('Failed to delete row:', errorText);
      alert(`Failed to delete row: ${errorText}`);
    }
  } catch (error) {
    console.error('Error deleting row:', error);
  }
};
  

  return (
    <div className="table-container">
      <div className="filter-container">
        <label htmlFor="item-select"></label>
        <select
          id="item-select"
          value={selectedItem}
          onChange={(e) => setSelectedItem(e.target.value)}
        >
          <option value="S">Safety</option>
          <option value="E">Environment</option>
          <option value="Q">Quality</option>
          <option value="C">Cost</option>
          <option value="D">Delivery</option>
        </select>

        <div className="dropdown">
          <button onClick={toggleDropdown} className="dropdown-button">
            Pilih Tahun
          </button>
          {dropdownOpen && (
            <div className="dropdown-content">
              {availableYears.map((year, index) => (
                <label key={index} className="dropdown-item">
                  <input
                    type="checkbox"
                    value={year}
                    checked={selectedYears.includes(year)}
                    onChange={() => handleYearChange(year)}
                  />
                  {year}
                </label>
              ))}
            </div>
          )}
        </div>

        <button onClick={handleResetFilters} style={{ float: 'right', marginRight: '10px' }}>Hapus Semua Filter</button>
        <div style={{ float: 'right', marginRight: '10px', marginLeft: '794px' }}>
          <input
            type="text"
            placeholder="Filter Result..."
            value={searchName}
            onChange={handleNameChange}
            style={{ width: '150px' }}
          />
        </div>
      </div>

      {filteredItems.length > 0 ? (
        filteredItems.map((item, itemIndex) => (
          <div key={itemIndex}>
            {item.Results.length > 0 ? (
              <table key={`${itemIndex}-${item.Year}`} className="saved-safety-table">
                <caption>{`Tahun ${item.Year}`}</caption>
                <thead>
                  <tr>
                    <th rowSpan="2">KPI Result</th>
                    <th colSpan="1">KPI Factor</th>
                    <th colSpan="2" rowSpan="2">Status</th>
                    <th rowSpan="3">Unit</th>
                    <th rowSpan="3">Target</th>
                    <th colSpan="12">Bulan</th>
                   </tr>
                  <tr>
                    <th>KPI Factor Name</th>
                    <th>Jan</th>
                    <th>Feb</th>
                    <th>Mar</th>
                    <th>Apr</th>
                    <th>May</th>
                    <th>Jun</th>
                    <th>Jul</th>
                    <th>Aug</th>
                    <th>Sep</th>
                    <th>Oct</th>
                    <th>Nov</th>
                    <th>Dec</th>
              </tr>
            </thead>
            <tbody>
              {item.Results.map((result, resultIndex) => (
                result.Factors.length > 0 ? (
                  result.Factors.map((factor, factorIndex) => (
                    <React.Fragment key={`${itemIndex}-${resultIndex}-${factorIndex}`}>
                      {/* Render baris dengan kolom Name, Title, Unit, Target */}
                      <tr>
                        <td rowSpan={2}>
                          {isEditing ? (
                            <textarea
                              value={editedData.Results[resultIndex].Name}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Name = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            result.Name
                          )}
                        </td>
                        <td rowSpan={2}>
                          {isEditing ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Title}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Title = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Title
                          )}
                        </td>
                        <td colSpan={2}>Plan</td>
                        <td rowSpan={2}>
                          {isEditing ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Unit}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Unit = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Unit
                          )}
                        </td>
                        <td rowSpan={2}>
                          {isEditing ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Target}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Target = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Target
                          )}
                        </td>
                        {/* Render kolom bulan untuk Planned */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
                            {isEditing ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Planned']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Planned', month)}
                              />
                            ) : (
                              (factor['Planned'] && factor['Planned'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
               
                      </tr>
                      {/* Render baris untuk Actual */}
                      <tr>
                        <td colSpan={2}>Actual</td>
                        {/* Render kolom bulan untuk Actual */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
                            {isEditing ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Actual']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Actual', month)}
                              />
                            ) : (
                              (factor['Actual'] && factor['Actual'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
                      </tr>
                    </React.Fragment>
                  ))
                ) : (
                  <tr key={`${itemIndex}-${resultIndex}-no-factors`}>
                    <td colSpan="18">Data factors tidak tersedia</td>
                  </tr>
                )
              ))}

            </tbody>

            <div className="buttonsum" style={{ display: 'inline-block' }}>
  <div style={{ display: 'inline-block' }}>
    {isEditing ? (
      <>
        <button
          onClick={() => handleDeleteRowClick(item.Item_ID)}
          style={{
            marginRight: '5px',
            backgroundColor: 'red',
            color: 'white',
            display: 'inline-block',
            marginBottom: '5px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            padding: '10px 20px'
,
            marginTop: '10px'

          }}
        >
          Delete All Data
        </button>
        <button
  onClick={() => handleSaveData(item.Item_ID)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #4CAF50, #008000)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    padding: '10px 20px'
,
    cursor: 'pointer'
  }}
>
  Save Data
</button>

        <button
          onClick={() => handleAddRowClick(item.Year)}
          style={{
            marginRight: '5px',
            background: 'linear-gradient(to right, #4CAF50, #008000)',
            color: 'white',
            display: 'inline-block',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            padding: '10px 20px'
,
            cursor: 'pointer'
          }}
        >
          Add Row
        </button>
      </>
    ) : (
      <>
        <button
          onClick={() => handleUpdateData(itemIndex, item.Year)}
          style={{
            marginRight: '5px',
            background: 'linear-gradient(to right, #8b0000, #ff2e2e)',
            color: 'white',
            display: 'inline-block',
            marginBottom: '5px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            marginTop: '10px',
            padding: '10px 20px'
          }}
        >
          Update Data
        </button>
      </>
    )}
  </div>
</div>

          </table>
        ) : (
          <p key={`${itemIndex}-no-results`}>Data results tidak tersedia</p>
        )}
      </div>
    ))
  ) : (
    <p>Data items tidak tersedia</p>
  )}
</div>
);
};

export default SavedSafetyTable;

===

import React, { useState, useEffect } from 'react';
import "../Styles/saved-table.css";

const SavedSafetyTable = () => {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState('S');
  const [filteredItems, setFilteredItems] = useState([]);
  const [selectedYears, setSelectedYears] = useState([]);
  const [availableYears, setAvailableYears] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [searchName, setSearchName] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState({});
  const [lastRowId, setLastRowId] = useState(0);
  const [isEditingRows, setIsEditingRows] = useState([]);

  useEffect(() => {
    // Initialize isEditingRows state based on the number of items
    setIsEditingRows(new Array(items.length).fill(false));
  }, [items]);

  const handleSaveData = async (item_id) => {
    const authToken = localStorage.getItem('authToken');
  
    try {
      const formattedData = {
        Item_ID: item_id,
        Name: editedData.Name,
        Results: editedData.Results.map(result => ({
          Name: result.Name,
          Result_ID: result.Result_ID,
          Factors: result.Factors.map(factor => ({
            Factor_ID: factor.Factor_ID,
            Title: factor.Title,
            Unit: factor.Unit,
            Target: factor.Target,
            Planned: factor.Planned,
            Actual: factor.Actual
          }))
        })),
        Year: editedData.Year
      };
  
      const isNewData = !items.some(item => item.Item_ID === item_id);
      const method = isNewData ? 'POST' : 'PUT';
      const url = isNewData
        ? `http://localhost:8080/kpi/item`
        : `http://localhost:8080/kpi/item/entire/${item_id}`;
  
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          "Authorization": `Bearer ${authToken}`
        },
       
        body: JSON.stringify(formattedData)
      });
  
      if (response.ok) {
        alert('Data updated successfully');
        setIsEditing(false);
        const updatedItems = isNewData
          ? [...items, formattedData]
          : items.map(item => item.Item_ID === item_id ? formattedData : item);
        setItems(updatedItems);
      } else {
        const errorText = await response.text();
        console.error('Failed to update data:', errorText);
        alert(`Failed to update data: ${errorText}`);
      }
  
    } catch (error) {
      console.error('Error updating data:', error);
    }
  };

  const handleAddRowClick = (year) => {
    const newRowId = lastRowId + 1;
    setLastRowId(newRowId);
  
    // Membuat baris baru dengan data default
    const newRow = {
      Result_ID: newRowId,
      Name: "",
      Factors: [
        {
          Title: "",
          Unit: "",
          Target: "",
          Planned: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          },
          Actual: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          }
        }
      ],
      Year: year
    };
  
    // Menambahkan baris baru ke data yang sedang diedit, hanya jika tahunnya cocok
    setEditedData(prevData => {
      // Mengecek apakah tahun pada data yang sedang diedit sama dengan tahun yang dipilih
      if (prevData.Year === year) {
        return {
          ...prevData,
          Results: [...prevData.Results, newRow]
        };
      } else {
        // Jika tahunnya tidak cocok, tidak ada perubahan yang dibuat
        return prevData;
      }
    });
  
    // Juga tambahkan baris baru ke filteredItems
    setFilteredItems(prevFilteredItems => {
      return prevFilteredItems.map(item => {
        if (item.Year === year) {
          return {
            ...item,
            Results: [...item.Results, newRow]
          };
        }
        return item;
      });
    });
  };

  const handleChange = (e, resultIndex, factorIndex, type, month) => {
    const { value } = e.target;
    const numericValue = parseFloat(value);
  
    if (!isNaN(numericValue)) {
      setEditedData(prevData => {
        const newData = JSON.parse(JSON.stringify(prevData));
        if (!newData.Results[resultIndex].Factors[factorIndex][type]) {
          newData.Results[resultIndex].Factors[factorIndex][type] = { Monthly: [{}] };
        } else if (!newData.Results[resultIndex].Factors[factorIndex][type].Monthly) {
          newData.Results[resultIndex].Factors[factorIndex][type].Monthly = [{}];
        }
        newData.Results[resultIndex].Factors[factorIndex][type].Monthly[0][month] = numericValue;
        return newData;
      });
    }
  };
  
  const handleNameChange = (e) => {
    setSearchName(e.target.value);
  };

  useEffect(() => {
    fetch('http://localhost:8080/kpi/item')
      .then(response => response.json())
      .then(data => {
        console.log('Response JSON (item):', data);
        setItems(data.data); 
        if (data.data.length > 0) {
          setSelectedItem(data.data[0].Name);
          const years = Array.from(new Set(data.data.map(item => item.Year)));
          setAvailableYears(years);
        }
      })
      .catch(error => {
        console.error('Error fetching item data:', error);
      });
  }, []);

  useEffect(() => {
    const filtered = items.filter(item =>
      item.Name === selectedItem &&
      (selectedYears.length === 0 || selectedYears.includes(item.Year)) &&
      (item.Results.some(result => result.Name.toLowerCase().includes(searchName.toLowerCase())))
    );
    setFilteredItems(filtered);
  }, [selectedItem, selectedYears, items, searchName]);

  const handleYearChange = (year) => {
    setSelectedYears(prevSelectedYears =>
      prevSelectedYears.includes(year)
        ? prevSelectedYears.filter(y => y !== year)
        : [...prevSelectedYears, year]
    );
  };

  const handleResetFilters = () => {
    setSelectedYears([]);
    setSearchName('');
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  const handleUpdateData = (itemIndex) => {
    // Set isEditing status for the clicked row
    setIsEditingRows(prevIsEditingRows => {
      const updatedIsEditingRows = [...prevIsEditingRows];
      updatedIsEditingRows[itemIndex] = true;
      return updatedIsEditingRows;
    });

    // Set edited data for the clicked row
    const dataToEdit = filteredItems[itemIndex];
    console.log('Data to be updated:', dataToEdit);
    if (dataToEdit) {
      setEditedData({ ...dataToEdit });
    } else {
      console.error('No data available for the selected item');
    }
  };

  
// Dalam komponen SavedSafetyTable
const handleDeleteRowClick = async (item_id) => {
  const authToken = localStorage.getItem('authToken');

  try {
    const response = await fetch(`http://localhost:8080/kpi/item/entire/${item_id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": `Bearer ${authToken}`
      }
    });

    if (response.ok) {
      alert('Row deleted successfully');
      // Hapus baris dari state filteredItems
      setFilteredItems(prevFilteredItems => prevFilteredItems.filter(item => item.Item_ID !== item_id));
      // Hapus baris dari state items
      setItems(prevItems => prevItems.filter(item => item.Item_ID !== item_id));
    } else {
      const errorText = await response.text();
      console.error('Failed to delete row:', errorText);
      alert(`Failed to delete row: ${errorText}`);
    }
  } catch (error) {
    console.error('Error deleting row:', error);
  }
};
  

  return (
    <div className="table-container">
      <div className="filter-container">
        <label htmlFor="item-select"></label>
        <select
          id="item-select"
          value={selectedItem}
          onChange={(e) => setSelectedItem(e.target.value)}
        >
          <option value="S">Safety</option>
          <option value="E">Environment</option>
          <option value="Q">Quality</option>
          <option value="C">Cost</option>
          <option value="D">Delivery</option>
        </select>

        <div className="dropdown">
          <button onClick={toggleDropdown} className="dropdown-button">
            Pilih Tahun
          </button>
          {dropdownOpen && (
            <div className="dropdown-content">
              {availableYears.map((year, index) => (
                <label key={index} className="dropdown-item">
                  <input
                    type="checkbox"
                    value={year}
                    checked={selectedYears.includes(year)}
                    onChange={() => handleYearChange(year)}
                  />
                  {year}
                </label>
              ))}
            </div>
          )}
        </div>

        <button onClick={handleResetFilters} style={{ float: 'right', marginRight: '10px' }}>Hapus Semua Filter</button>
        <div style={{ float: 'right', marginRight: '10px', marginLeft: '794px' }}>
          <input
            type="text"
            placeholder="Filter Result..."
            value={searchName}
            onChange={handleNameChange}
            style={{ width: '150px' }}
          />
        </div>
      </div>

      {filteredItems.length > 0 ? (
        filteredItems.map((item, itemIndex) => (
          <div key={itemIndex}>
            {item.Results.length > 0 ? (
              <table key={`${itemIndex}-${item.Year}`} className="saved-safety-table">
                <caption>{`Tahun ${item.Year}`}</caption>
                <thead>
                  <tr>
                    <th rowSpan="2">KPI Result</th>
                    <th colSpan="1">KPI Factor</th>
                    <th colSpan="2" rowSpan="2">Status</th>
                    <th rowSpan="3">Unit</th>
                    <th rowSpan="3">Target</th>
                    <th colSpan="12">Bulan</th>
                   </tr>
                  <tr>
                    <th>KPI Factor Name</th>
                    <th>Jan</th>
                    <th>Feb</th>
                    <th>Mar</th>
                    <th>Apr</th>
                    <th>May</th>
                    <th>Jun</th>
                    <th>Jul</th>
                    <th>Aug</th>
                    <th>Sep</th>
                    <th>Oct</th>
                    <th>Nov</th>
                    <th>Dec</th>
              </tr>
            </thead>
            <tbody>
              {item.Results.map((result, resultIndex) => (
                result.Factors.length > 0 ? (
                  result.Factors.map((factor, factorIndex) => (
                    <React.Fragment key={`${itemIndex}-${resultIndex}-${factorIndex}`}>
                      {/* Render baris dengan kolom Name, Title, Unit, Target */}
                      <tr>
                      <td rowSpan={2}>
                      {isEditingRows[itemIndex] ? (
                        <textarea
                          value={editedData.Results[resultIndex].Name}
                          onChange={(e) => {
                            const updatedData = { ...editedData };
                            updatedData.Results[resultIndex].Name = e.target.value;
                            setEditedData(updatedData);
                          }}
                        />
                      ) : (
                        result.Name
                      )}
                    </td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Title}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Title = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Title
                          )}
                        </td>
                        <td colSpan={2}>Plan</td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Unit}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Unit = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Unit
                          )}
                        </td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Target}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Target = e.target.value;
                                setEditedData(updatedData);
                              }}
                            />
                          ) : (
                            factor.Target
                          )}
                        </td>
                        {/* Render kolom bulan untuk Planned */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Planned']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Planned', month)}
                              />
                            ) : (
                              (factor['Planned'] && factor['Planned'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
               
                      </tr>
                      {/* Render baris untuk Actual */}
                      <tr>
                        <td colSpan={2}>Actual</td>
                        {/* Render kolom bulan untuk Actual */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Actual']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Actual', month)}
                              />
                            ) : (
                              (factor['Actual'] && factor['Actual'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
                      </tr>
                    </React.Fragment>
                  ))
                ) : (
                  <tr key={`${itemIndex}-${resultIndex}-no-factors`}>
                    <td colSpan="18">Data factors tidak tersedia</td>
                  </tr>
                )
              ))}

            </tbody>

            <div className="buttonsum" style={{ display: 'inline-block' }}>
  <div style={{ display: 'inline-block' }}>
  {isEditingRows[itemIndex] ? (
      <>
        <button
          onClick={() => handleDeleteRowClick(item.Item_ID)}
          style={{
            marginRight: '5px',
            backgroundColor: 'red',
            color: 'white',
            display: 'inline-block',
            marginBottom: '5px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            padding: '10px 20px'
,
            marginTop: '10px'

          }}
        >
          Delete All Data
        </button>
        <button
  onClick={() => handleSaveData(item.Item_ID)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #4CAF50, #008000)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    padding: '10px 20px'
,
    cursor: 'pointer'
  }}
>
  Save Data
</button>

        <button
          onClick={() => handleAddRowClick(item.Year)}
          style={{
            marginRight: '5px',
            background: 'linear-gradient(to right, #4CAF50, #008000)',
            color: 'white',
            display: 'inline-block',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            padding: '10px 20px'
,
            cursor: 'pointer'
          }}
        >
          Add Row
        </button>
      </>
    ) : (
      <>
        <button
  onClick={() => handleUpdateData(itemIndex)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #8b0000, #ff2e2e)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    marginTop: '10px',
    padding: '10px 20px'
  }}
>
  Update Data
</button>

      </>
    )}
  </div>
</div>

          </table>
        ) : (
          <p key={`${itemIndex}-no-results`}>Data results tidak tersedia</p>
        )}
      </div>
    ))
  ) : (
    <p>Data items tidak tersedia</p>
  )}
</div>
);
};

export default SavedSafetyTable;

===

import React, { useState, useEffect } from 'react';
import "../Styles/saved-table.css";

const SavedSafetyTable = () => {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState('S');
  const [filteredItems, setFilteredItems] = useState([]);
  const [selectedYears, setSelectedYears] = useState([]);
  const [availableYears, setAvailableYears] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [searchName, setSearchName] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState({});
  const [lastRowId, setLastRowId] = useState(0);
  const [isEditingRows, setIsEditingRows] = useState([]);
  const [editingTableIndex, setEditingTableIndex] = useState(null); // State baru untuk menyimpan indeks tabel yang sedang dalam mode pengeditan


  useEffect(() => {
    // Initialize isEditingRows state based on the number of items
    setIsEditingRows(new Array(items.length).fill(false));
  }, [items]);

  const handleSaveData = async (item_id) => {
    const authToken = localStorage.getItem('authToken');
  
    try {
      const formattedData = {
        Item_ID: item_id,
        Name: editedData.Name,
        Results: editedData.Results.map(result => ({
          Name: result.Name,
          Result_ID: result.Result_ID,
          Factors: result.Factors.map(factor => ({
            Factor_ID: factor.Factor_ID,
            Title: factor.Title,
            Unit: factor.Unit,
            Target: factor.Target,
            Planned: factor.Planned,
            Actual: factor.Actual
          }))
        })),
        Year: editedData.Year
      };
  
      const isNewData = !items.some(item => item.Item_ID === item_id);
      const method = isNewData ? 'POST' : 'PUT';
      const url = isNewData
        ? `http://localhost:8080/kpi/item`
        : `http://localhost:8080/kpi/item/entire/${item_id}`;
  
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          "Authorization": `Bearer ${authToken}`
        },
       
        body: JSON.stringify(formattedData)
      });
  
      if (response.ok) {
        alert('Data updated successfully');
        setIsEditing(false);
        const updatedItems = isNewData
          ? [...items, formattedData]
          : items.map(item => item.Item_ID === item_id ? formattedData : item);
        setItems(updatedItems);
      } else {
        const errorText = await response.text();
        console.error('Failed to update data:', errorText);
        alert(`Failed to update data: ${errorText}`);
      }
  
    } catch (error) {
      console.error('Error updating data:', error);
    }
  };

  const handleAddRowClick = (year) => {
    const newRowId = lastRowId + 1;
    setLastRowId(newRowId);
  
    // Membuat baris baru dengan data default
    const newRow = {
      Result_ID: newRowId,
      Name: "",
      Factors: [
        {
          Title: "",
          Unit: "",
          Target: "",
          Planned: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          },
          Actual: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          }
        }
      ],
      Year: year
    };
  
    // Menambahkan baris baru ke data yang sedang diedit, hanya jika tahunnya cocok
    setEditedData(prevData => {
      // Mengecek apakah tahun pada data yang sedang diedit sama dengan tahun yang dipilih
      if (prevData.Year === year) {
        return {
          ...prevData,
          Results: [...prevData.Results, newRow]
        };
      } else {
        // Jika tahunnya tidak cocok, tidak ada perubahan yang dibuat
        return prevData;
      }
    });
  
    // Juga tambahkan baris baru ke filteredItems
    setFilteredItems(prevFilteredItems => {
      return prevFilteredItems.map(item => {
        if (item.Year === year) {
          return {
            ...item,
            Results: [...item.Results, newRow]
          };
        }
        return item;
      });
    });
  };

  const handleChange = (e, resultIndex, factorIndex, type, month) => {
    const { value } = e.target;
    const numericValue = parseFloat(value);
  
    if (!isNaN(numericValue)) {
      setEditedData(prevData => {
        const newData = JSON.parse(JSON.stringify(prevData));
        if (!newData.Results[resultIndex].Factors[factorIndex][type]) {
          newData.Results[resultIndex].Factors[factorIndex][type] = { Monthly: [{}] };
        } else if (!newData.Results[resultIndex].Factors[factorIndex][type].Monthly) {
          newData.Results[resultIndex].Factors[factorIndex][type].Monthly = [{}];
        }
        newData.Results[resultIndex].Factors[factorIndex][type].Monthly[0][month] = numericValue;
        return newData;
      });
    }
  };
  
  const handleNameChange = (e) => {
    setSearchName(e.target.value);
  };

  useEffect(() => {
    fetch('http://localhost:8080/kpi/item')
      .then(response => response.json())
      .then(data => {
        console.log('Response JSON (item):', data);
        setItems(data.data); 
        if (data.data.length > 0) {
          setSelectedItem(data.data[0].Name);
          const years = Array.from(new Set(data.data.map(item => item.Year)));
          setAvailableYears(years);
        }
      })
      .catch(error => {
        console.error('Error fetching item data:', error);
      });
  }, []);

  useEffect(() => {
    const filtered = items.filter(item =>
      item.Name === selectedItem &&
      (isEditing ? item.Year === editedData.Year : selectedYears.length === 0 || selectedYears.includes(item.Year)) &&
      (item.Results.some(result => result.Name.toLowerCase().includes(searchName.toLowerCase())))
    );
    setFilteredItems(filtered);
  }, [selectedItem, selectedYears, items, searchName, isEditing, editedData.Year]);
  

  // Fungsi untuk menentukan apakah tahun tertentu terpilih atau tidak
  const isYearSelected = (year) => {
    return selectedYears.includes(year);
  };

  const handleYearChange = (year) => {
    setSelectedYears(prevSelectedYears =>
      prevSelectedYears.includes(year)
        ? prevSelectedYears.filter(y => y !== year)
        : [...prevSelectedYears, year]
    );
  };

  const handleResetFilters = () => {
    setSelectedYears([]);
    setSearchName('');
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  const handleUpdateData = (itemIndex) => {
    // Cek apakah ada tabel lain yang sedang dalam mode pengeditan
    const isAnyTableEditing = isEditingRows.some((editingStatus, index) => editingStatus && index !== itemIndex);
  
    // Jika ada tabel lain yang sedang dalam mode pengeditan, munculkan prompt
    if (isAnyTableEditing) {
      alert("Anda hanya bisa mengedit 1 tabel!");
    } else {
      // Set isEditing status for the clicked row
      setIsEditingRows(prevIsEditingRows => {
        const updatedIsEditingRows = [...prevIsEditingRows];
        updatedIsEditingRows[itemIndex] = true;
        return updatedIsEditingRows;
      });
  
      // Set edited data for the clicked row
      const dataToEdit = filteredItems[itemIndex];
      console.log('Data to be updated:', dataToEdit);
      if (dataToEdit) {
        setEditedData({ ...dataToEdit });
        setEditingTableIndex(itemIndex); // Set indeks tabel yang sedang dalam mode pengeditan
      } else {
        console.error('No data available for the selected item');
      }
    }
  };
  

  
// Dalam komponen SavedSafetyTable
const handleDeleteRowClick = async (item_id) => {
  const authToken = localStorage.getItem('authToken');

  try {
    const response = await fetch(`http://localhost:8080/kpi/item/entire/${item_id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": `Bearer ${authToken}`
      }
    });

    if (response.ok) {
      alert('Row deleted successfully');
      // Hapus baris dari state filteredItems
      setFilteredItems(prevFilteredItems => prevFilteredItems.filter(item => item.Item_ID !== item_id));
      // Hapus baris dari state items
      setItems(prevItems => prevItems.filter(item => item.Item_ID !== item_id));
    } else {
      const errorText = await response.text();
      console.error('Failed to delete row:', errorText);
      alert(`Failed to delete row: ${errorText}`);
    }
  } catch (error) {
    console.error('Error deleting row:', error);
  }
};
  

  return (
    <div className="table-container">
      <div className="filter-container">
        <label htmlFor="item-select"></label>
        <select
          id="item-select"
          value={selectedItem}
          onChange={(e) => setSelectedItem(e.target.value)}
        >
          <option value="S">Safety</option>
          <option value="E">Environment</option>
          <option value="Q">Quality</option>
          <option value="C">Cost</option>
          <option value="D">Delivery</option>
        </select>

        <div className="dropdown">
          <button onClick={toggleDropdown} className="dropdown-button">
            Pilih Tahun
          </button>
          {dropdownOpen && (
            <div className="dropdown-content">
              {availableYears.map((year, index) => (
                <label key={index} className="dropdown-item">
                  <input
                    type="checkbox"
                    value={year}
                    checked={selectedYears.includes(year)}
                    onChange={() => handleYearChange(year)}
                  />
                  {year}
                </label>
              ))}
            </div>
          )}
        </div>

        <button onClick={handleResetFilters} style={{ float: 'right', marginRight: '10px' }}>Hapus Semua Filter</button>
        <div style={{ float: 'right', marginRight: '10px', marginLeft: '794px' }}>
          <input
            type="text"
            placeholder="Filter Result..."
            value={searchName}
            onChange={handleNameChange}
            style={{ width: '150px' }}
          />
        </div>
      </div>

      {filteredItems.length > 0 ? (
        filteredItems.map((item, itemIndex) => (
          <div key={itemIndex}>
            {item.Results.length > 0 ? (
              <table key={`${itemIndex}-${item.Year}`} className="saved-safety-table">
                <caption>{`Tahun ${item.Year}`}</caption>
                <thead>
                  <tr>
                    <th rowSpan="2">KPI Result</th>
                    <th colSpan="1">KPI Factor</th>
                    <th colSpan="2" rowSpan="2">Status</th>
                    <th rowSpan="3">Unit</th>
                    <th rowSpan="3">Target</th>
                    <th colSpan="12">Bulan</th>
                   </tr>
                  <tr>
                    <th>KPI Factor Name</th>
                    <th>Jan</th>
                    <th>Feb</th>
                    <th>Mar</th>
                    <th>Apr</th>
                    <th>May</th>
                    <th>Jun</th>
                    <th>Jul</th>
                    <th>Aug</th>
                    <th>Sep</th>
                    <th>Oct</th>
                    <th>Nov</th>
                    <th>Dec</th>
              </tr>
            </thead>
            <tbody>
              {item.Results.map((result, resultIndex) => (
                result.Factors.length > 0 ? (
                  result.Factors.map((factor, factorIndex) => (
                    <React.Fragment key={`${itemIndex}-${resultIndex}-${factorIndex}`}>
                      {/* Render baris dengan kolom Name, Title, Unit, Target */}
                      <tr>
                      <td rowSpan={2}>
                      {isEditingRows[itemIndex] ? (
                        <textarea
                          value={editedData.Results[resultIndex].Name}
                          onChange={(e) => {
                            const updatedData = { ...editedData };
                            updatedData.Results[resultIndex].Name = e.target.value;
                            setEditedData(updatedData);
                          }}
                          style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                        />
                      ) : (
                        result.Name
                      )}
                    </td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Title}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Title = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Title
                          )}
                        </td>
                        <td colSpan={2}>Plan</td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Unit}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Unit = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Unit
                          )}
                        </td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Target}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Target = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Target
                          )}
                        </td>
                        {/* Render kolom bulan untuk Planned */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Planned']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Planned', month)}
                              />
                            ) : (
                              (factor['Planned'] && factor['Planned'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
               
                      </tr>
                      {/* Render baris untuk Actual */}
                      <tr>
                        <td colSpan={2}>Actual</td>
                        {/* Render kolom bulan untuk Actual */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Actual']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Actual', month)}
                              />
                            ) : (
                              (factor['Actual'] && factor['Actual'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
                      </tr>
                    </React.Fragment>
                  ))
                ) : (
                  <tr key={`${itemIndex}-${resultIndex}-no-factors`}>
                    <td colSpan="18">Data factors tidak tersedia</td>
                  </tr>
                )
              ))}

            </tbody>

            <div className="buttonsum" style={{ display: 'inline-block' }}>
  <div style={{ display: 'inline-block' }}>
  {isEditingRows[itemIndex] ? (
      <>
        <button
          onClick={() => handleDeleteRowClick(item.Item_ID)}
          style={{
            marginRight: '5px',
            backgroundColor: 'red',
            color: 'white',
            display: 'inline-block',
            marginBottom: '5px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            padding: '10px 20px'
,
            marginTop: '10px'

          }}
        >
          Delete All Data
        </button>
        <button
  onClick={() => handleSaveData(item.Item_ID)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #4CAF50, #008000)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    padding: '10px 20px'
,
    cursor: 'pointer'
  }}
>
  Save Data
</button>

        <button
          onClick={() => handleAddRowClick(item.Year)}
          style={{
            marginRight: '5px',
            background: 'linear-gradient(to right, #4CAF50, #008000)',
            color: 'white',
            display: 'inline-block',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            padding: '10px 20px',
            cursor: 'pointer',
            marginBottom: '10px'
          }}
        >
          Add Row
        </button>
      </>
    ) : (
      <>
        <button
  onClick={() => handleUpdateData(itemIndex)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #8b0000, #ff2e2e)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    marginTop: '10px',
    padding: '10px 20px'
  }}
>
  Update Data
</button>

      </>
    )}
  </div>
</div>

          </table>
        ) : (
          <p key={`${itemIndex}-no-results`}>Data results tidak tersedia</p>
        )}
      </div>
    ))
  ) : (
    <p>Data items tidak tersedia</p>
  )}
</div>
);
};

export default SavedSafetyTable;

====

import React, { useState, useEffect } from 'react';
import "../Styles/saved-table.css";

const SavedSafetyTable = () => {
  const [items, setItems] = useState([]);
  const [selectedItem, setSelectedItem] = useState('S');
  const [filteredItems, setFilteredItems] = useState([]);
  const [selectedYears, setSelectedYears] = useState([]);
  const [availableYears, setAvailableYears] = useState([]);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [searchName, setSearchName] = useState('');
  const [isEditing, setIsEditing] = useState(false);
  const [editedData, setEditedData] = useState({});
  const [lastRowId, setLastRowId] = useState(0);
  const [isEditingRows, setIsEditingRows] = useState([]);
  const [editingTableIndex, setEditingTableIndex] = useState(null); // State baru untuk menyimpan indeks tabel yang sedang dalam mode pengeditan


  useEffect(() => {
    // Initialize isEditingRows state based on the number of items
    setIsEditingRows(new Array(items.length).fill(false));
  }, [items]);

  const handleSaveData = async (item_id) => {
    const authToken = localStorage.getItem('authToken');
  
    try {
      const formattedData = {
        Item_ID: item_id,
        Name: editedData.Name,
        Results: editedData.Results.map(result => ({
          Name: result.Name,
          Result_ID: result.Result_ID,
          Factors: result.Factors.map(factor => ({
            Factor_ID: factor.Factor_ID,
            Title: factor.Title,
            Unit: factor.Unit,
            Target: factor.Target,
            Planned: factor.Planned,
            Actual: factor.Actual
          }))
        })),
        Year: editedData.Year
      };
  
      const isNewData = !items.some(item => item.Item_ID === item_id);
      const method = isNewData ? 'POST' : 'PUT';
      const url = isNewData
        ? `http://localhost:8080/kpi/item`
        : `http://localhost:8080/kpi/item/entire/${item_id}`;
  
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
          "Authorization": `Bearer ${authToken}`
        },
       
        body: JSON.stringify(formattedData)
      });
  
      if (response.ok) {
        alert('Data updated successfully');
        setIsEditing(false);
        const updatedItems = isNewData
          ? [...items, formattedData]
          : items.map(item => item.Item_ID === item_id ? formattedData : item);
        setItems(updatedItems);
      } else {
        const errorText = await response.text();
        console.error('Failed to update data:', errorText);
        alert(`Failed to update data: ${errorText}`);
      }
  
    } catch (error) {
      console.error('Error updating data:', error);
    }
  };

  const handleAddRowClick = (year) => {
    const newRowId = lastRowId + 1;
    setLastRowId(newRowId);
  
    // Membuat baris baru dengan data default
    const newRow = {
      Result_ID: newRowId,
      Name: "",
      Factors: [
        {
          Title: "",
          Unit: "",
          Target: "",
          Planned: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          },
          Actual: {
            Monthly: [{ January: 0, February: 0, March: 0, April: 0, May: 0, June: 0, July: 0, August: 0, September: 0, October: 0, November: 0, December: 0 }]
          }
        }
      ],
      Year: year
    };
  
    // Menambahkan baris baru ke data yang sedang diedit, hanya jika tahunnya cocok
    setEditedData(prevData => {
      // Mengecek apakah tahun pada data yang sedang diedit sama dengan tahun yang dipilih
      if (prevData.Year === year) {
        return {
          ...prevData,
          Results: [...prevData.Results, newRow]
        };
      } else {
        // Jika tahunnya tidak cocok, tidak ada perubahan yang dibuat
        return prevData;
      }
    });
  
    // Juga tambahkan baris baru ke filteredItems
    setFilteredItems(prevFilteredItems => {
      return prevFilteredItems.map(item => {
        if (item.Year === year) {
          return {
            ...item,
            Results: [...item.Results, newRow]
          };
        }
        return item;
      });
    });
  };

  const handleChange = (e, resultIndex, factorIndex, type, month) => {
    const { value } = e.target;
    const numericValue = parseFloat(value);
  
    if (!isNaN(numericValue)) {
      setEditedData(prevData => {
        const newData = JSON.parse(JSON.stringify(prevData));
        if (!newData.Results[resultIndex].Factors[factorIndex][type]) {
          newData.Results[resultIndex].Factors[factorIndex][type] = { Monthly: [{}] };
        } else if (!newData.Results[resultIndex].Factors[factorIndex][type].Monthly) {
          newData.Results[resultIndex].Factors[factorIndex][type].Monthly = [{}];
        }
        newData.Results[resultIndex].Factors[factorIndex][type].Monthly[0][month] = numericValue;
        return newData;
      });
    }
  };
  
  const handleNameChange = (e) => {
    setSearchName(e.target.value);
  };

  useEffect(() => {
    fetch('http://localhost:8080/kpi/item')
      .then(response => response.json())
      .then(data => {
        console.log('Response JSON (item):', data);
        setItems(data.data); 
        if (data.data.length > 0) {
          setSelectedItem(data.data[0].Name);
          const years = Array.from(new Set(data.data.map(item => item.Year)));
          setAvailableYears(years);
        }
      })
      .catch(error => {
        console.error('Error fetching item data:', error);
      });
  }, []);

  useEffect(() => {
    const filtered = items.filter(item =>
      item.Name === selectedItem &&
      (isEditing ? item.Year === editedData.Year : selectedYears.length === 0 || selectedYears.includes(item.Year)) &&
      (item.Results.some(result => result.Name.toLowerCase().includes(searchName.toLowerCase())))
    );
    setFilteredItems(filtered);
  }, [selectedItem, selectedYears, items, searchName, isEditing, editedData.Year]);
  

  // Fungsi untuk menentukan apakah tahun tertentu terpilih atau tidak
  const isYearSelected = (year) => {
    return selectedYears.includes(year);
  };

  const handleYearChange = (year) => {
    setSelectedYears(prevSelectedYears =>
      prevSelectedYears.includes(year)
        ? prevSelectedYears.filter(y => y !== year)
        : [...prevSelectedYears, year]
    );
  };

  const handleResetFilters = () => {
    setSelectedYears([]);
    setSearchName('');
  };

  const toggleDropdown = () => {
    setDropdownOpen(!dropdownOpen);
  };

  const handleUpdateData = (itemIndex) => {
    // Cek apakah ada tabel lain yang sedang dalam mode pengeditan
    const isAnyTableEditing = isEditingRows.some((editingStatus, index) => editingStatus && index !== itemIndex);
  
    // Jika ada tabel lain yang sedang dalam mode pengeditan, munculkan prompt
    if (isAnyTableEditing) {
      alert("Anda hanya bisa mengedit 1 tabel!");
    } else {
      // Set isEditing status for the clicked row
      setIsEditingRows(prevIsEditingRows => {
        const updatedIsEditingRows = [...prevIsEditingRows];
        updatedIsEditingRows[itemIndex] = true;
        return updatedIsEditingRows;
      });
  
      // Set edited data for the clicked row
      const dataToEdit = filteredItems[itemIndex];
      console.log('Data to be updated:', dataToEdit);
      if (dataToEdit) {
        setEditedData({ ...dataToEdit });
        setEditingTableIndex(itemIndex); // Set indeks tabel yang sedang dalam mode pengeditan
      } else {
        console.error('No data available for the selected item');
      }
    }
  };
  

  
// Dalam komponen SavedSafetyTable
const handleDeleteRowClick = async (item_id) => {
  const authToken = localStorage.getItem('authToken');

  try {
    const response = await fetch(`http://localhost:8080/kpi/item/entire/${item_id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": `Bearer ${authToken}`
      }
    });

    if (response.ok) {
      alert('Row deleted successfully');
      // Hapus baris dari state filteredItems
      setFilteredItems(prevFilteredItems => prevFilteredItems.filter(item => item.Item_ID !== item_id));
      // Hapus baris dari state items
      setItems(prevItems => prevItems.filter(item => item.Item_ID !== item_id));
    } else {
      const errorText = await response.text();
      console.error('Failed to delete row:', errorText);
      alert(`Failed to delete row: ${errorText}`);
    }
  } catch (error) {
    console.error('Error deleting row:', error);
  }
};

const handleDeletePerResult = async (result_id) => {
  const authToken = localStorage.getItem('authToken');

  try {
    const response = await fetch(`http://localhost:8080/kpi/result/entire/${result_id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        "Authorization": `Bearer ${authToken}`
      }
    });

    if (response.ok) {
      alert('Result deleted successfully');
      setFilteredItems(prevFilteredItems => {
        return prevFilteredItems.map(item => ({
          ...item,
          Results: item.Results.filter(result => result.Result_ID !== result_id)
        }));
      });
      setItems(prevItems => {
        return prevItems.map(item => ({
          ...item,
          Results: item.Results.filter(result => result.Result_ID !== result_id)
        }));
      });
    } else {
      const errorText = await response.text();
      console.error('Failed to delete result:', errorText);
      alert(`Failed to delete result: ${errorText}`);
    }
  } catch (error) {
    console.error('Error deleting result:', error);
  }
};
  

  return (
    <div className="table-container">
      <div className="filter-container">
        <label htmlFor="item-select"></label>
        <select
          id="item-select"
          value={selectedItem}
          onChange={(e) => setSelectedItem(e.target.value)}
        >
          <option value="S">Safety</option>
          <option value="E">Environment</option>
          <option value="Q">Quality</option>
          <option value="C">Cost</option>
          <option value="D">Delivery</option>
        </select>

        <div className="dropdown">
          <button onClick={toggleDropdown} className="dropdown-button">
            Pilih Tahun
          </button>
          {dropdownOpen && (
            <div className="dropdown-content">
              {availableYears.map((year, index) => (
                <label key={index} className="dropdown-item">
                  <input
                    type="checkbox"
                    value={year}
                    checked={selectedYears.includes(year)}
                    onChange={() => handleYearChange(year)}
                  />
                  {year}
                </label>
              ))}
            </div>
          )}
        </div>

        <button onClick={handleResetFilters} style={{ float: 'right', marginRight: '10px' }}>Hapus Semua Filter</button>
        <div style={{ float: 'right', marginRight: '10px', marginLeft: '794px' }}>
          <input
            type="text"
            placeholder="Filter Result..."
            value={searchName}
            onChange={handleNameChange}
            style={{ width: '150px' }}
          />
        </div>
      </div>

      {filteredItems.length > 0 ? (
        filteredItems.map((item, itemIndex) => (
          <div key={itemIndex}>
            {item.Results.length > 0 ? (
              <table key={`${itemIndex}-${item.Year}`} className="saved-safety-table">
                <caption>{`Tahun ${item.Year}`}</caption>
                <thead>
                  <tr>
                    <th rowSpan="2">KPI Result</th>
                    <th colSpan="1">KPI Factor</th>
                    <th colSpan="2" rowSpan="2">Status</th>
                    <th rowSpan="3">Unit</th>
                    <th rowSpan="3">Target</th>
                    <th colSpan="12">Bulan</th>
                   </tr>
                  <tr>
                    <th>KPI Factor Name</th>
                    <th>Jan</th>
                    <th>Feb</th>
                    <th>Mar</th>
                    <th>Apr</th>
                    <th>May</th>
                    <th>Jun</th>
                    <th>Jul</th>
                    <th>Aug</th>
                    <th>Sep</th>
                    <th>Oct</th>
                    <th>Nov</th>
                    <th>Dec</th>
              </tr>
            </thead>
            <tbody>
              {item.Results.map((result, resultIndex) => (
                result.Factors.length > 0 ? (
                  result.Factors.map((factor, factorIndex) => (
                    <React.Fragment key={`${itemIndex}-${resultIndex}-${factorIndex}`}>
                      {/* Render baris dengan kolom Name, Title, Unit, Target */}
                      <tr>
                      <td rowSpan={2}>
                      {isEditingRows[itemIndex] ? (
                        <>
                          <textarea
                            value={editedData.Results[resultIndex].Name}
                            onChange={(e) => {
                              const updatedData = { ...editedData };
                              updatedData.Results[resultIndex].Name = e.target.value;
                              setEditedData(updatedData);
                            }}
                            style={{ width: '100px', height: '50px' }} // Sesuaikan nilai width dan height sesuai kebutuhan
                          />
                          <button onClick={() => handleDeletePerResult(result.Result_ID)}>Delete Result</button>
                        </>
                      ) : (
                        result.Name
                      )}
                    </td>

                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Title}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Title = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Title
                          )}
                        </td>
                        <td colSpan={2}>Plan</td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Unit}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Unit = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Unit
                          )}
                        </td>
                        <td rowSpan={2}>
                        {isEditingRows[itemIndex] ? (
                            <textarea
                              value={editedData.Results[resultIndex].Factors[factorIndex].Target}
                              onChange={(e) => {
                                const updatedData = { ...editedData };
                                updatedData.Results[resultIndex].Factors[factorIndex].Target = e.target.value;
                                setEditedData(updatedData);
                              }}
                              style={{ width: '100px', height: '50px' }} // Anda dapat menyesuaikan nilai width dan height sesuai kebutuhan

                            />
                          ) : (
                            factor.Target
                          )}
                        </td>
                        {/* Render kolom bulan untuk Planned */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Planned']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Planned', month)}
                              />
                            ) : (
                              (factor['Planned'] && factor['Planned'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
               
                      </tr>
                      {/* Render baris untuk Actual */}
                      <tr>
                        <td colSpan={2}>Actual</td>
                        {/* Render kolom bulan untuk Actual */}
                        {['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map((month, monthIndex) => (
                          <td key={monthIndex}>
  {isEditingRows[itemIndex] ? (
                              <input
                                type="number"
                                value={(editedData.Results[resultIndex].Factors[factorIndex]['Actual']?.Monthly[0]?.[month]) || ''}
                                onChange={(e) => handleChange(e, resultIndex, factorIndex, 'Actual', month)}
                              />
                            ) : (
                              (factor['Actual'] && factor['Actual'].Monthly[0][month]) || '-'
                            )}
                          </td>
                        ))}
                      </tr>
                    </React.Fragment>
                  ))
                ) : (
                  <tr key={`${itemIndex}-${resultIndex}-no-factors`}>
                    <td colSpan="18">Data factors tidak tersedia</td>
                  </tr>
                )
              ))}

            </tbody>

            <div className="buttonsum" style={{ display: 'inline-block' }}>
  <div style={{ display: 'inline-block' }}>
  {isEditingRows[itemIndex] ? (
      <>
        <button
          onClick={() => handleDeleteRowClick(item.Item_ID)}
          style={{
            marginRight: '5px',
            backgroundColor: 'red',
            color: 'white',
            display: 'inline-block',
            marginBottom: '5px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            padding: '10px 20px'
,
            marginTop: '10px'

          }}
        >
          Delete All Data
        </button>
        <button
  onClick={() => handleSaveData(item.Item_ID)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #4CAF50, #008000)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    padding: '10px 20px'
,
    cursor: 'pointer'
  }}
>
  Save Data
</button>

        <button
          onClick={() => handleAddRowClick(item.Year)}
          style={{
            marginRight: '5px',
            background: 'linear-gradient(to right, #4CAF50, #008000)',
            color: 'white',
            display: 'inline-block',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            padding: '10px 20px',
            cursor: 'pointer',
            marginBottom: '10px'
          }}
        >
          Add Row
        </button>
      </>
    ) : (
      <>
        <button
  onClick={() => handleUpdateData(itemIndex)}
  style={{
    marginRight: '5px',
    background: 'linear-gradient(to right, #8b0000, #ff2e2e)',
    color: 'white',
    display: 'inline-block',
    marginBottom: '5px',
    padding: '5px 10px',
    border: 'none',
    borderRadius: '5px',
    cursor: 'pointer',
    marginTop: '10px',
    padding: '10px 20px'
  }}
>
  Update Data
</button>

      </>
    )}
  </div>
</div>

          </table>
        ) : (
          <p key={`${itemIndex}-no-results`}>Data results tidak tersedia</p>
        )}
      </div>
    ))
  ) : (
    <p>Data items tidak tersedia</p>
  )}
</div>
);
};

export default SavedSafetyTable;
