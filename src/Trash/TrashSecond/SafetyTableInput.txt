import React, { useState } from "react";
import "../Styles/table.css";

const SafetyTableInput = () => {
  // State untuk menyimpan array baris tabel
  const [rows, setRows] = useState([
    {
      result: "Result 1",
      factors: [{ name: "Factor Name 1", statuses: [{ name: "Status 1" }] }],
      unit: "Unit 1",
      target: "Target 1",
      dataJan: "Data Jan",
      dataFeb: "Data Feb",
      dataMaret: "Data Maret",
      dataApril: "Data April",
      dataMei: "Data Mei",
    },
  ]);

  // Fungsi untuk menangani penghapusan baris
  const handleDeleteClick = (index) => {
    const newRows = [...rows];
    newRows.splice(index, 1);
    setRows(newRows);
  };

  // Fungsi untuk menangani penghapusan status
const handleDeleteStatusClick = (rowIndex, factorIndex, statusIndex) => {
    const newRows = [...rows];
    newRows[rowIndex].factors[factorIndex].statuses.splice(statusIndex, 1);
    setRows(newRows);
  };


  // Fungsi untuk menangani penghapusan faktor
  const handleDeleteFactorClick = (rowIndex, factorIndex) => {
    const newRows = [...rows];
    newRows[rowIndex].factors.splice(factorIndex, 1);
    setRows(newRows);
  };

  // Fungsi untuk menangani penambahan faktor baru
  const handleAddFactorClick = (index) => {
    const newRows = [...rows];
    newRows[index].factors.push({ name: `Factor Name ${newRows[index].factors.length + 1}`, statuses: [{ name: "Status 1" }] });
    setRows(newRows);
  };

  // Fungsi untuk menangani penambahan status baru
  const handleAddStatusClick = (rowIndex, factorIndex) => {
    const newRows = [...rows];
    newRows[rowIndex].factors[factorIndex].statuses.push({ name: `Status ${newRows[rowIndex].factors[factorIndex].statuses.length + 1}` });
    setRows(newRows);
  };

  // Fungsi untuk menangani penambahan baris baru
  const handleAddRowClick = () => {
    const newRow = {
      result: `Result ${rows.length + 1}`,
      factors: [{ name: `Factor Name 1`, statuses: [{ name: "Status 1" }] }],
      unit: `Unit ${rows.length + 1}`,
      target: `Target ${rows.length + 1}`,
      dataJan: `Data Jan`,
      dataFeb: `Data Feb`,
      dataMaret: `Data Maret`,
      dataApril: `Data April`,
      dataMei: `Data Mei`,
    };
    setRows([...rows, newRow]);
  };

  return (
    <div className="table-container">
      <table className="safety-table">
        <caption>Safety Table</caption> {/* Judul tabel */}
        <thead>
          <tr>
            <th rowSpan="2">
              KPI Result
              <div className="add">
              <button className="add-result-button" onClick={handleAddRowClick}>+</button>
              </div>
            </th>
            <th colSpan="2">KPI Factor</th>
            <th rowSpan="2">Unit</th>
            <th rowSpan="2">Target</th>
            <th colSpan="5">Bulan</th>
          </tr>
          <tr>
            <th>KPI Factor Name</th>
            <th>Status</th>
            <th>Jan</th>
            <th>Feb</th>
            <th>Maret</th>
            <th>April</th>
            <th>Mei</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <React.Fragment key={rowIndex}>
              {row.factors.map((factor, factorIndex) => (
                <React.Fragment key={`${rowIndex}-${factorIndex}`}>
                  {factor.statuses.map((status, statusIndex) => (
                    <tr key={`${rowIndex}-${factorIndex}-${statusIndex}`}>
                      {factorIndex === 0 && statusIndex === 0 && (
                        <td rowSpan={row.factors.reduce((total, current) => total + current.statuses.length, 0)}>
                          {row.result}
                          <div className="add">
                          <button className="add-factor-button" onClick={() => handleDeleteClick(rowIndex)}>- Result</button>
                          </div>
                          <div className="add">
                          <button className="add-factor-button" onClick={() => handleAddFactorClick(rowIndex)}>+ Factor</button>
                          </div>
                        </td>
                      )}
                      {statusIndex === 0 && (
                        <td rowSpan={factor.statuses.length}>
                            {factor.name}
                            <div className="add">
                            <button className="add-factor-button" onClick={() => handleDeleteFactorClick(rowIndex, factorIndex)}> - Factor </button>
                            </div>
                            <button className="add-factor-button" onClick={() => handleAddStatusClick(rowIndex, factorIndex)}> + Status </button>
                        </td>
                        )}
                        <td>{status.name}
                        <div className="add">
                        <button className="add-factor-button" onClick={() => handleDeleteStatusClick(rowIndex, factorIndex, statusIndex)}> - Status </button>
                        </div>
                        </td>
                      <td>{row.unit}</td>
                      <td>{row.target}</td>
                      <td>{row.dataJan}</td>
                      <td>{row.dataFeb}</td>
                      <td>{row.dataMaret}</td>
                      <td>{row.dataApril}</td>
                      <td>{row.dataMei}</td>
                    </tr>
                  ))}
                </React.Fragment>
              ))}
            </React.Fragment>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SafetyTableInput;

==============

import React, { useState } from "react";
import "../Styles/table.css";

const SafetyTable = () => {
  const [lastRowId, setLastRowId] = useState(1);
  const [lastFactorId, setLastFactorId] = useState(1);

  const [rows, setRows] = useState([
    {
      result: (
        <textarea
          id="result1"
          className="custominput"
          rows="6"
          cols="20"
          placeholder="Result 1"
          onChange={(e) => handleResultChange("result1", e.target.value)}
        />
      ),
      factors: [
        {
          name: (
            <textarea
              id="factor1-1"
              className="custominput"
              rows="6"
              cols="20"
              placeholder="Factor 1"
              onChange={(e) => handleFactorChange("factor1-1", e.target.value)}
            />
          ),
          id: 1,
          statuses: [{ plan: "", actual: "", id: 1 }],
        },
      ],
      unit: "",
      target: "",
      Plan: {
        January: "",
        February: "",
        March: "",
        April: "",
        May: "",
        June: "",
        July: "",
        August: "",
        September: "",
        October: "",
        November: "",
        December: "",
      },
      Actual: {
        January: "",
        February: "",
        March: "",
        April: "",
        May: "",
        June: "",
        July: "",
        August: "",
        September: "",
        October: "",
        November: "",
        December: "",
      },
    },
  ]);

  // Handle change for Plan
const handlePlanChange = (index, month, value) => {
  const newRows = [...rows];
  newRows[index].Plan[month] = value;
  setRows(newRows);
};

// Handle change for Actual
const handleActualChange = (index, month, value) => {
  const newRows = [...rows];
  newRows[index].Actual[month] = value;
  setRows(newRows);
};

  const [results, setResults] = useState({});
  const [factors, setFactors] = useState({});

  const handleResultChange = (id, value) => {
    setResults((prevState) => ({
      ...prevState,
      [id]: value,
    }));
  };

  const handleFactorChange = (id, value) => {
    setFactors((prevState) => ({
      ...prevState,
      [id]: value,
    }));
  };

  const handleUnitChange = (index, value) => {
    const newRows = [...rows];
    newRows[index].unit = value;
    setRows(newRows);
  };

  const handleTargetChange = (index, value) => {
    const newRows = [...rows];
    newRows[index].target = value;
    setRows(newRows);
  };

  const handleMonthChange = (index, month, value) => {
    const newRows = [...rows];
    newRows[index].Plan[month] = value; // Update Plan or Actual based on requirement
    setRows(newRows);
  };

  const handleAddFactorClick = (index) => {
    const newRows = [...rows];
    const newRowId = lastFactorId + 1;
    setLastFactorId(newRowId);

    newRows[index].factors.push({
      name: (
        <textarea
          id={`factor${newRowId}`}
          name={`factor${newRowId}`}
          className="custominput"
          rows="6"
          cols="20"
          placeholder={`Factor ${newRowId}`}
          onChange={(e) => handleFactorChange(`factor${index + 1}-${newRowId}`, e.target.value)}
        ></textarea>
      ),
      id: newRowId,
      statuses: [{ plan: "", actual: "", id: 1 }],
    });
    setRows(newRows);
  };

  const handleSaveData = () => {
    const year = prompt("Simpan Table Data Untuk Tahun Berapa?");
    if (year) {
      const authToken = localStorage.getItem("authToken");
  
      // POST request to /yearly endpoint
      const yearlyData = {
        Year: parseInt(year),
        // tambahkan properti lain sesuai kebutuhan
      };
  
      fetch("http://localhost:8080/kpi/yearly/entire", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${authToken}`,
        },
        body: JSON.stringify(yearlyData),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to save yearly data");
          }
          return response.json();
        })
        .then((data) => {
          console.log("Yearly data saved successfully:", data);
  
          const yearId = data.yearly_id; // Assuming the response contains the ID of the saved yearly data
  
          const itemData = {
            Name: "S",
            year_id: yearId,
          };
  
          return fetch("http://localhost:8080/kpi/item/entire", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${authToken}`,
            },
            body: JSON.stringify(itemData),
          });
        })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Failed to save item");
          }
          return response.json();
        })
        .then((item) => {
          console.log("Item berhasil disimpan:", item);
          const resultPromises = [];
          const factorPromises = [];
  
          const itemId = item.Item_ID; // Assuming the response contains the ID of the saved item
  
          rows.forEach((row, index) => {
            const resultValue = results[`result${index + 1}`];
            if (resultValue) {
              const resultData = {
                Name: resultValue,
                item_id: itemId,
              };
  
              resultPromises.push(
                fetch("http://localhost:8080/kpi/result/entire", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${authToken}`,
                  },
                  body: JSON.stringify(resultData),
                })
                  .then((response) => {
                    if (!response.ok) {
                      throw new Error("Failed to save result");
                    }
                    return response.json();
                  })
                  .then((data) => {
                    console.log(`Data hasil disimpan untuk tahun ${year}:`, data);
                  })
                  .catch((error) => {
                    console.error("Error saving result:", error);
                  })
              );
            }
  
            row.factors.forEach((factor) => {
              const factorValue = factors[`factor${index + 1}-${factor.id}`];
              if (factorValue) {
                const factorData = {
                  Title: factorValue,
                  Unit: row.unit,
                  Target: row.target,
                 };
  
                factorPromises.push(
                  fetch("http://localhost:8080/kpi/factor/entire", {
                    method: "POST",
                    headers: {
                      "Content-Type": "application/json",
                      Authorization: `Bearer ${authToken}`,
                    },
                    body: JSON.stringify(factorData),
                  })
                    .then((response) => {
                      if (!response.ok) {
                        throw new Error("Failed to save factor");
                      }
                      return response.json();
                    })
                    .then((data) => {
                      console.log(`Data faktor disimpan untuk tahun ${year}:`, data);
                    })
                    .catch((error) => {
                      console.error("Error saving factor:", error);
                    })
                );
              }
            });
  
            // POST request to /monthly endpoint for Plan data
            const monthlyPlanData = {
              January: parseInt(row.Plan.January),
              February: parseInt(row.Plan.February),
              March: parseInt(row.Plan.March),
              April: parseInt(row.Plan.April),
              May: parseInt(row.Plan.May),
              June: parseInt(row.Plan.June),
              July: parseInt(row.Plan.July),
              August: parseInt(row.Plan.August),
              September: parseInt(row.Plan.September),
              October: parseInt(row.Plan.October),
              November: parseInt(row.Plan.November),
              December: parseInt(row.Plan.December),
            };
  
            fetch("http://localhost:8080/kpi/monthly", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${authToken}`,
              },
              body: JSON.stringify(monthlyPlanData),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error("Failed to save monthly plan data");
                }
                return response.json();
              })
              .then((data) => {
                console.log("Monthly plan data saved successfully:", data);
                alert(`Monthly plan data for year ${year} saved successfully`);
              })
              .catch((error) => {
                console.error("Error saving monthly plan data:", error);
                alert("Failed to save monthly plan data. Please try again.");
              });
  
            // POST request to /monthly endpoint for Actual data
            const monthlyActualData = {
              January: parseInt(row.Actual.January),
              February: parseInt(row.Actual.February),
              March: parseInt(row.Actual.March),
              April: parseInt(row.Actual.April),
              May: parseInt(row.Actual.May),
              June: parseInt(row.Actual.June),
              July: parseInt(row.Actual.July),
              August: parseInt(row.Actual.August),
              September: parseInt(row.Actual.September),
              October: parseInt(row.Actual.October),
              November: parseInt(row.Actual.November),
              December: parseInt(row.Actual.December),
            };
  
            fetch("http://localhost:8080/kpi/monthly", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${authToken}`,
              },
              body: JSON.stringify(monthlyActualData),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error("Failed to save monthly actual data");
                }
                return response.json();
              })
              .then((data) => {
                console.log("Monthly actual data saved successfully:", data);
                alert(`Monthly actual data for year ${year} saved successfully`);
              })
              .catch((error) => {
                console.error("Error saving monthly actual data:", error);
                alert("Failed to save monthly actual data. Please try again.");
              });
          });
  
          Promise.all([...resultPromises, ...factorPromises])
            .then(() => {
              alert(`Data tabel disimpan untuk tahun ${year}`);
            })
            .catch(() => {
              alert("Gagal menyimpan data. Silakan coba lagi.");
            });
        })
        .catch((error) => {
          console.error("Error saving item:", error);
          alert("Gagal menyimpan item. Silakan coba lagi.");
        });
    }
  };
  

  const handleAddRowClick = () => {
    const newRowId = lastRowId + 1;
    setLastRowId(newRowId);
  
    const newRow = {
      result: (
        <textarea
          id={`result${newRowId}`}
          name={`result${newRowId}`}
          className="custominput"
          rows="6"
          cols="20"
          placeholder={`Result ${newRowId}`}
          onChange={(e) => handleResultChange(`result${newRowId}`, e.target.value)}
        ></textarea>
      ),
      factors: [
        {
          name: (
            <textarea
              id={`factor${newRowId}-1`}
              name={`factor${newRowId}-1`}
              className="custominput"
              rows="6"
              cols="20"
              placeholder={`Factor 1`}
              onChange={(e) => handleFactorChange(`factor${newRowId}-1`, e.target.value)}
            ></textarea>
          ),
          id: 1,
          statuses: [{ plan: "", actual: "", id: 1 }],
        },
      ],
      unit: "",
      target: "",
      Plan: {
        January: "",
        February: "",
        March: "",
        April: "",
        May: "",
        June: "",
        July: "",
        August: "",
        September: "",
        October: "",
        November: "",
        December: "",
      },
      Actual: {
        January: "",
        February: "",
        March: "",
        April: "",
        May: "",
        June: "",
        July: "",
        August: "",
        September: "",
        October: "",
        November: "",
        December: "",
      },
    };
    setRows([...rows, newRow]);
  };
  

  const handleDeleteClick = (index) => {
    // Periksa apakah ada lebih dari satu baris
    if (rows.length === 1) {
      alert("You must have at least one result!");
      return;
    }
    // Konfirmasi penghapusan
    const isConfirmed = window.confirm("Are you sure you want to delete this row?");
    if (isConfirmed) {
      const newRows = [...rows];
      newRows.splice(index, 1);
      setRows(newRows);
    }
  };

  // Fungsi untuk menangani penghapusan faktor
  const handleDeleteFactorClick = (rowIndex, factorIndex) => {
    // Periksa apakah ada lebih dari satu faktor
    if (rows[rowIndex].factors.length === 1) {
      alert("You must have at least one factor!");
      return;
    }
    // Konfirmasi penghapusan
    const isConfirmed = window.confirm("Are you sure you want to delete this factor?");
    if (isConfirmed) {
      const newRows = [...rows];
      newRows[rowIndex].factors.splice(factorIndex, 1);
      setRows(newRows);
    }
  };

  return (
    <div className="table-container">
      <table className="safety-table">
        <caption>Safety Table</caption>
        <thead>
          <tr>
            <th rowSpan="3">
              KPI Result
              <div className="add">
                <button className="add-result-button" onClick={handleAddRowClick}>
                  +
                </button>
              </div>
            </th>
            <th colSpan="1">KPI Factor</th>
            <th colSpan="2" rowSpan="2">Status</th>
            <th rowSpan="3">Unit</th>
            <th rowSpan="3">Target</th>
            <th colSpan="12">Bulan</th>
          </tr>
          <tr>
            <th>KPI Factor Name</th>
            <th>Jan</th>
            <th>Feb</th>
            <th>Mar</th>
            <th>Apr</th>
            <th>Mei</th>
            <th>Jun</th>
            <th>Jul</th>
            <th>Ags</th>
            <th>Sept</th>
            <th>Oct</th>
            <th>Nov</th>
            <th>Dec</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((row, rowIndex) => (
            <React.Fragment key={rowIndex}>
              {row.factors.map((factor, factorIndex) => (
                <React.Fragment key={`${rowIndex}-${factorIndex}`}>
                  {factor.statuses.map((status, statusIndex) => (
                    <React.Fragment key={`${rowIndex}-${factorIndex}-${statusIndex}`}>
                      <tr>
                        {factorIndex === 0 && statusIndex === 0 && (
                          <td rowSpan={row.factors.reduce((total, current) => total + current.statuses.length * 2, 0)}>
                            {row.result}
                            <div className="add">
                              <button className="add-factor-button" onClick={() => handleDeleteClick(rowIndex)}>
                                - Result
                              </button>
                            </div>
                            <div className="add">
                              <button className="add-factor-button" onClick={() => handleAddFactorClick(rowIndex)}>
                                + Factor
                              </button>
                            </div>
                          </td>
                        )}
                        {statusIndex === 0 && (
                          <td rowSpan={factor.statuses.length * 2}>
                            {factor.name}
                            <div className="add">
                              <button className="add-factor-button" onClick={() => handleDeleteFactorClick(rowIndex, factorIndex)}>
                                - Factor
                              </button>
                            </div>
                          </td>
                        )}
                        <td colSpan={2}>Plan</td>
                        <td rowSpan={2}>
                          <input
                            type="text"
                            value={row.unit}
                            onChange={(e) => handleUnitChange(rowIndex, e.target.value)}
                          />
                        </td>
                        <td rowSpan={2}>
                          <input
                            type="text"
                            value={row.target}
                            onChange={(e) => handleTargetChange(rowIndex, e.target.value)}
                          />
                        </td>
                        {/* Change handleMonthChange to handlePlanChange for Plan */}
                        <td>
                          <input
                            type="number"
                            value={row.Plan.January}
                            onChange={(e) => handlePlanChange(rowIndex, 'January', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.February}
                            onChange={(e) => handlePlanChange(rowIndex, 'February', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.March}
                            onChange={(e) => handlePlanChange(rowIndex, 'March', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.April}
                            onChange={(e) => handlePlanChange(rowIndex, 'April', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.May}
                            onChange={(e) => handlePlanChange(rowIndex, 'May', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.June}
                            onChange={(e) => handlePlanChange(rowIndex, 'June', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.July}
                            onChange={(e) => handlePlanChange(rowIndex, 'July', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.August}
                            onChange={(e) => handlePlanChange(rowIndex, 'August', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.September}
                            onChange={(e) => handlePlanChange(rowIndex, 'September', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.October}
                            onChange={(e) => handlePlanChange(rowIndex, 'October', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.November}
                            onChange={(e) => handlePlanChange(rowIndex, 'November', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Plan.December}
                            onChange={(e) => handlePlanChange(rowIndex, 'December', e.target.value)}
                          />
                        </td>
                      </tr>
                      <tr>
                        <td colSpan={2}>Actual</td>
                        {/* Change handleMonthChange to handleActualChange for Actual */}
                        <td>
                          <input
                            type="number"
                            value={row.Actual.January}
                            onChange={(e) => handleActualChange(rowIndex, 'January', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.February}
                            onChange={(e) => handleActualChange(rowIndex, 'February', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.March}
                            onChange={(e) => handleActualChange(rowIndex, 'March', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.April}
                            onChange={(e) => handleActualChange(rowIndex, 'April', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.May}
                            onChange={(e) => handleActualChange(rowIndex, 'May', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.June}
                            onChange={(e) => handleActualChange(rowIndex, 'June', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.July}
                            onChange={(e) => handleActualChange(rowIndex, 'July', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.August}
                            onChange={(e) => handleActualChange(rowIndex, 'August', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.September}
                            onChange={(e) => handleActualChange(rowIndex, 'September', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.October}
                            onChange={(e) => handleActualChange(rowIndex, 'October', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.November}
                            onChange={(e) => handleActualChange(rowIndex, 'November', e.target.value)}
                          />
                        </td>
                        <td>
                          <input
                            type="number"
                            value={row.Actual.December}
                            onChange={(e) => handleActualChange(rowIndex, 'December', e.target.value)}
                          />
                        </td>
                      </tr>
                    </React.Fragment>
                  ))}
                </React.Fragment>
              ))}
            </React.Fragment>
          ))}
        </tbody>
      </table>
      <div className="save">
        <button onClick={handleSaveData}>Save Table Data</button>
      </div>
    </div>
  );
};

export default SafetyTable;

====


