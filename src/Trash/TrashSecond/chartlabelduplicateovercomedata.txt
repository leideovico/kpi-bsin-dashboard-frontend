import React, { useState, useEffect } from 'react';
import 'chartjs-plugin-datalabels';
import { Bar } from 'react-chartjs-2';
import { Chart } from 'chart.js/auto'; // Import Chart.js auto for version 3+
import '../Styles/chart.css';
import { registerables } from 'chart.js';
import ChartDataLabels from 'chartjs-plugin-datalabels';



function ChartComponent({ chartSize }) {
  const [firstTargetData, setFirstTargetData] = useState([]);
  const [firstActualData, setFirstActualData] = useState([]);
  const [secondTargetData, setSecondTargetData] = useState([]);
  const [secondActualData, setSecondActualData] = useState([]);
  const [thirdTargetData, setThirdTargetData] = useState([]);
  const [thirdActualData, setThirdActualData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [activeSearchTerm, setActiveSearchTerm] = useState('');
  const [filteredIndices, setFilteredIndices] = useState([]);
  Chart.register(...registerables, ChartDataLabels);



  const chartDescriptions = [
    { kpiResult: "KPI result 1", kpiFactorName: "Factor 1", unit: "Unit 1", target: "Target 1" },
    { kpiResult: "KPI result 1", kpiFactorName: "Factor 1", unit: "Unit 2", target: "Target 2" },
    { kpiResult: "KPI result 3", kpiFactorName: "Factor 3", unit: "Unit 3", target: "Target 3" }
  ];

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  const handleSearch = () => {
    setActiveSearchTerm(searchTerm);
  };

  const handleRemoveFilter = () => {
    setSearchTerm('');
    setActiveSearchTerm('');
  };

  useEffect(() => {
    // Inisialisasi filteredIndices dengan semua indeks chart
    setFilteredIndices(chartDescriptions.map((_, index) => index));
  }, []);
  
  useEffect(() => {
    if (activeSearchTerm === '') {
      // Jika activeSearchTerm kosong, semua chart akan ditampilkan
      setFilteredIndices(chartDescriptions.map((_, index) => index));
    } else {
      // Jika activeSearchTerm tidak kosong, lakukan filter berdasarkan activeSearchTerm
      const newFilteredIndices = chartDescriptions.reduce((acc, { kpiResult, kpiFactorName }, index) => {
        if (kpiResult.toLowerCase().includes(activeSearchTerm.toLowerCase()) ||
            kpiFactorName.toLowerCase().includes(activeSearchTerm.toLowerCase())) {
          acc.push(index);
        }
        return acc;
      }, []);
      setFilteredIndices(newFilteredIndices);
    }
  }, [activeSearchTerm]);
  
  
  useEffect(() => {

    const loadFirstChartData = async () => {
      let exampleFirstActualData = Array.from({ length: 12 }, () => Math.floor(Math.random() * 31) + 10);
      let exampleFirstTargetData = exampleFirstActualData.map(actual => actual + Math.floor(Math.random() * (41 - actual)) + 1);
    
      // Pastikan minimal 2 angka yang melebihi atau sama dengan target
      let countExceed = 0;
      for (let i = 0; i < 12; i++) {
        if (exampleFirstActualData[i] >= exampleFirstTargetData[i]) {
          countExceed++;
        }
        if (countExceed >= 2) {
          break;
        }
      }
    
      // Jika tidak ada minimal 2 angka yang melebihi atau sama dengan target, ubah 2 nilai pertama
      if (countExceed < 2) {
        exampleFirstActualData[0] += 2;
        exampleFirstActualData[1] += 1;
      }
    
      setFirstActualData(exampleFirstActualData);
      setFirstTargetData(exampleFirstTargetData);
    };
    
    const loadSecondChartData = async () => {
      let exampleSecondActualData = Array.from({ length: 12 }, () => Math.floor(Math.random() * 31) + 10);
      let exampleSecondTargetData = exampleSecondActualData.map(actual => actual + Math.floor(Math.random() * (41 - actual)) + 1);
    
      // Pastikan minimal 2 angka yang melebihi atau sama dengan target
      let countExceed = 0;
      for (let i = 0; i < 12; i++) {
        if (exampleSecondActualData[i] >= exampleSecondTargetData[i]) {
          countExceed++;
        }
        if (countExceed >= 2) {
          break;
        }
      }
    
      // Jika tidak ada minimal 2 angka yang melebihi atau sama dengan target, ubah 2 nilai pertama
      if (countExceed < 2) {
        exampleSecondActualData[0] += 2;
        exampleSecondActualData[1] += 1;
      }
    
      setSecondActualData(exampleSecondActualData);
      setSecondTargetData(exampleSecondTargetData);
    };
    
    const loadThirdChartData = async () => {
      let exampleThirdActualData = Array.from({ length: 12 }, () => Math.floor(Math.random() * 31) + 10);
      let exampleThirdTargetData = exampleThirdActualData.map(actual => actual + Math.floor(Math.random() * (41 - actual)) + 1);
    
      // Pastikan minimal 2 angka yang melebihi atau sama dengan target
      let countExceed = 0;
      for (let i = 0; i < 12; i++) {
        if (exampleThirdActualData[i] >= exampleThirdTargetData[i]) {
          countExceed++;
        }
        if (countExceed >= 2) {
          break;
        }
      }
    
      // Jika tidak ada minimal 2 angka yang melebihi atau sama dengan target, ubah 2 nilai pertama
      if (countExceed < 2) {
        exampleThirdActualData[0] += 2;
        exampleThirdActualData[1] += 1;
      }
    
      setThirdActualData(exampleThirdActualData);
      setThirdTargetData(exampleThirdTargetData);
    };
    loadFirstChartData();
    loadSecondChartData();
    loadThirdChartData();
  }, []);

  const gradientColor = (context, isExceedTarget = true) => {
    const gradient = context.chart.ctx.createLinearGradient(0, 0, 0, 300);
    if (isExceedTarget) {
      gradient.addColorStop(0, '#FF0000'); // Warna merah
      gradient.addColorStop(1, '#8b0000'); // Warna merah tua

    } else {
      gradient.addColorStop(0, '#00FF00'); // Warna hijau
      gradient.addColorStop(1, '#FFFF00'); // Warna kuning
    }
    return gradient;
  };
  
  const chartData = (index) => {
    let actualData, targetData;

    // Tentukan data aktual dan target berdasarkan indeks deskripsi
    switch (index) {
      case 0:
        actualData = firstActualData;
        targetData = firstTargetData;
        break;
      case 1:
        actualData = secondActualData;
        targetData = secondTargetData;
        break;
      case 2:
        actualData = thirdActualData;
        targetData = thirdTargetData;
        break;
      default:
        actualData = [];
        targetData = [];
    }

    const ctx = document.createElement('canvas').getContext('2d'); // Buat konteks canvas sementara
    return {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],
      datasets: [
        {
          label: 'Actual Data',
          data: actualData,
          backgroundColor: actualData.map((value, index) => 
            value >= targetData[index] ? gradientColor({ chart: { ctx } }, false) : gradientColor({ chart: { ctx } })),
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1,
          pointStyle: 'circle',
          pointRadius: 5,
          pointHoverRadius: 8,
          datalabels: {
            display: true, // Selalu tampilkan datalabels untuk dataset ini
            offset: -25, // Menggeser label 10 piksel ke bawah dari pusat batang
            anchor: 'end', // Anchor pada akhir bar sehingga muncul di atas bar
            align: 'top', // Arahkan ke atas
            color: 'white', // Warna teks
            font: {
              size: 10 // Ukuran font
            }
          }
        },
        {
          label: 'Target Data',
          data: targetData,
          backgroundColor: 'rgba(0, 0, 0, 0)',
          borderColor: gradientColor({ chart: { ctx } }),
          borderWidth: 2,
          type: 'line',
          fill: false,
          pointStyle: 'circle',
          pointRadius: 5,
          pointHoverRadius: 8,
          datalabels: {
            color: 'black',
            size: 10, // Ukuran font
            align: 'end',
            anchor: 'end',
            offset: 2 // Offset spesifik untuk line chart
          }
        },
      ],
    };
  };
  
  const chartOptions = {
    plugins: {
      title: {
        display: true,
        text: `Tahun ${""}`, // Judul bisa diatur dinamis sesuai kebutuhan
        padding: {
          top: 0,
          bottom: 5
        },
        font: {
          size: 18,
          weight: 'bold'
        }
      },
      datalabels: {
        display: true, // Pastikan datalabels diaktifkan
        formatter: function(value, context) {
          // Tampilkan nilai sebenarnya dari bar
          return value;
        }
      }
    },
    scales: {
      x: {
        type: 'category',
      },
      y: {
        beginAtZero: true,
        min: 1,
        max: 50,
        barPercentage: 0.8,
        categoryPercentage: 0.9,
      },
    },
  };
  
  

  return (
    <div className='chart'>
      <div style={{ textAlign: 'left', marginBottom: '0px', marginTop: '60px', marginLeft: '140px' }}>
        <h2>Safety Chart</h2>
        <input type="text" placeholder="Search KPI Result or Factor..." value={searchTerm} onChange={handleSearchChange} />
        <div className='search'>
          <button onClick={handleSearch}>Search</button>
          <button onClick={handleRemoveFilter} style={{ marginLeft: '7px' }}>Remove Filter</button>
        </div>
        <div style={{ display: 'flex', justifyContent: 'center', gap: '10px' }}>
        {chartDescriptions.map((description, index) => (
          <React.Fragment key={index}>
            {filteredIndices.includes(index) && (
              <ChartContainer
                description={description}
                data={chartData(index)} // Ubah pemanggilan fungsi chartData
                options={chartOptions}
                size={chartSize}
                title={`202${index + 4}`} // Misalnya index pertama dimulai dari tahun 2024
              />
            )}
          </React.Fragment>
        ))}

        </div>
        <div className="chart-divider"></div> {/* Divider line */}
      </div>
    </div>
  );
};

const ChartContainer = ({ description, data, options, size, title }) => (
  <div style={{
    width: size.width,
    height: size.height,
    paddingLeft: size.paddingLeft,
    paddingTop: size.paddingTop,
    marginTop: size.marginTop,
    paddingBottom: size.paddingBottom,
    marginLeft: '5px', // Adjust if necessary
    marginRight: '5px',
    border: '2px solid #8b0000',
    boxShadow: '5px 5px 10px rgba(139, 0, 0, 0.5)',
    borderRadius: '10px',
  }}>
    <Bar data={data} options={{ ...options, plugins: { ...options.plugins, title: { ...options.plugins.title, text: `Tahun ${title}` } } }} />
    <div className="chart-description">
      <ul>
        <li>KPI Result: {description.kpiResult}</li>
        <li>KPI Factor Name: {description.kpiFactorName}</li>
        <li>Unit: {description.unit}</li>
        <li>Target: {description.target}</li>
      </ul>
    </div>
  </div>
);


export default ChartComponent;