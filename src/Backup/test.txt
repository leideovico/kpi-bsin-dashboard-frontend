import React, { useState } from "react";
import { months } from "./months.jsx"; // Import months

const EnvironmentTable = () => {
  const [kpiResults, setKpiResults] = useState([
    {
      id: 1,
      kpiFactorsCount: 0,
      statusCount: 0,
      kpiFactors: [], // Tambah properti kpiFactors untuk menyimpan faktor-faktor KPI
    },
  ]);

  const handleAddKpiResult = () => {
    const newId = kpiResults[kpiResults.length - 1].id + 1;
    setKpiResults([
      ...kpiResults,
      { id: newId, kpiFactorsCount: 0, kpiFactors: [] },
    ]);
  };

  const handleRemoveKpiResult = () => {
    if (kpiResults.length > 1) {
      setKpiResults(kpiResults.slice(0, -1));
    } else {
      alert("Must have at least one KPI result.");
    }
  };
  

  const handleAddKpiFactor = (resultId) => {
    setKpiResults(
      kpiResults.map((result) => {
        if (result.id === resultId) {
          const newFactor = {
            id: result.kpiFactors.length + 1,
            statusCount: 0,
            statusRows: [], // Tambah properti statusRows pada setiap faktor KPI baru
          };
          return {
            ...result,
            kpiFactors: [...result.kpiFactors, newFactor],
            kpiFactorsCount: result.kpiFactorsCount + 1,
          };
        }
        return result;
      }),
    );
  };

  const handleRemoveKpiFactor = (resultId) => {
    setKpiResults(kpiResults.map((result) => {
      if (result.id === resultId && result.kpiFactors.length > 0) {
        return {
          ...result,
          kpiFactors: result.kpiFactors.slice(0, -1),
          kpiFactorsCount: result.kpiFactorsCount - 1
        };
      }
      return result;
    }));
  };
  

  const handleAddStatusForFactor = (resultId, factorIndex) => {
    setKpiResults(
      kpiResults.map((result) => {
        if (result.id === resultId) {
          return {
            ...result,
            kpiFactors: result.kpiFactors.map((factor, index) => {
              if (index === factorIndex) {
                const newStatusCount = (factor.statusCount || 0) + 1;
                const newFactor = {
                  ...factor,
                  statusCount: newStatusCount,
                };
                // Buat array baru dengan menambahkan baris baru untuk "New Status"
                const newStatusRows = Array.from(
                  { length: newStatusCount },
                  (_, i) => ({
                    id: i + 1, // id unik untuk setiap status
                  }),
                );
                return {
                  ...newFactor,
                  statusRows: newStatusRows,
                };
              }
              return factor;
            }),
          };
        }
        return result;
      }),
    );
  };


  const handleRemoveStatusForFactor = (resultId, factorIndex) => {
    setKpiResults(
      kpiResults.map((result) => {
        if (result.id === resultId) {
          return {
            ...result,
            kpiFactors: result.kpiFactors.map((factor, index) => {
              if (index === factorIndex && factor.statusCount > 0) {
                const newStatusCount = factor.statusCount - 1;
                const newFactor = {
                  ...factor,
                  statusCount: newStatusCount,
                };
                // Buat array baru dengan menghapus baris terakhir untuk "Remove Status"
                const newStatusRows = newFactor.statusRows.slice(0, newStatusCount);
                return {
                  ...newFactor,
                  statusRows: newStatusRows,
                };
              }
              return factor;
            }),
          };
        }
        return result;
      })
    );
  };
  

  const handleAddStatus = (resultId) => {
    setKpiResults(
      kpiResults.map((result) => {
        if (result.id === resultId) {
          return {
            ...result,
            statusCount: (result.statusCount || 0) + 1,
          };
        }
        return result;
      }),
    );
  };

  const handleRemoveStatus = (resultId) => {
    setKpiResults(kpiResults.map((result) => {
      if (result.id === resultId && result.statusCount > 0) {
        return {
          ...result,
          statusCount: result.statusCount - 1,
        };
      }
      return result;
    }));
  };
  

  // Hitung total baris termasuk baris baru yang ditambahkan
  const totalRows =
    2 +
    kpiResults.reduce(
      (total, result) =>
        total +
        2 +
        result.kpiFactorsCount * 2 +
        (result.statusCount || 0) +
        result.kpiFactors.reduce(
          (acc, factor) => acc + (factor.statusCount || 0),
          0,
        ),
      0,
    );

  return (
    <table className="input-table">
      <thead>
        <h2>Environment</h2>
        <tr>
          <th rowSpan={totalRows}>Item</th>
          <th rowSpan={totalRows}>
            KPI Result{" "}
            <div className="result">
            <button className="add-result-button" onClick={handleAddKpiResult}>
              +  
            </button>
            <button className="remove-result-button" onClick={handleRemoveKpiResult}>
             -  
            </button>
            </div>
          </th>
          <th colSpan="2">KPI Factor</th>
          <th rowSpan="2">Unit</th>
          <th rowSpan="2">Target</th>
          <th colSpan={months.length}>Tahun 2024</th>
        </tr>
        <tr>
          <th>KPI Factor Name</th>
          <th>Status</th>
          {months.map((month, index) => (
            <th key={index}>{month}</th>
          ))}
        </tr>
      </thead>
      <tbody>
        {kpiResults.map((result, index) => (
          <React.Fragment key={result.id}>
            <tr>
              {index === 0 && <td rowSpan={totalRows}>Environtment</td>}

              <td
                rowSpan={
                  2 +
                  result.kpiFactorsCount * 2 +
                  (result.statusCount || 0) +
                  result.kpiFactors.reduce(
                    (acc, curr) => acc + (curr.statusRows?.length || 0),
                    0,
                  )
                }
              >
                <input type="text" />
                <div className="factor">
                <button
                  className="add-factor-button"
                  onClick={() => handleAddKpiFactor(result.id)}
                >
                  + Factor
                </button>
                <button
                  className="remove-factor-button"
                  onClick={() => handleRemoveKpiFactor(result.id)}
                >
                  - Factor
                </button>
                </div>
              </td>

              <td rowSpan={2 + (result.statusCount || 0)}>
              <input type="text" />
                <div className="status"> 
                <button
                  className="add-status-button"
                  onClick={() => handleAddStatus(result.id)}
                >
                  + Status
                </button>
                <button
                  className="remove-status-button"
                  onClick={() => handleRemoveStatus(result.id)}
                >
                  - Status
                </button>
                </div>
              </td>

              <td>
                <div className="kpi-factor-status"><input type="text" /></div>
              </td>
              <td rowSpan={2 + (result.statusCount || 0)}>
                <input type="text" />
              </td>
              <td rowSpan={2 + (result.statusCount || 0)}>
                <input type="text" />
              </td>

              {months.map((_, index) => (
                <td key={index}>
                  <input type="number" />
                </td>
              ))}
            </tr>
            <tr>
              <td>
                <div className="kpi-factor-status"><input type="text" /></div>
              </td>
              {months.map((_, index) => (
                <td key={index}>
                  <input type="number" />
                </td>
              ))}
            </tr>

            {/* Logika tambah KPI Status */}
            {Array.from({ length: result.statusCount || 0 }, (_, i) => (
              <React.Fragment key={i}>
                <tr>
                  <td>New Status</td>

                  {months.map((_, index) => (
                    <td key={index}>
                      <input type="number" />
                    </td>
                  ))}
                </tr>
              </React.Fragment>
            ))}

            {/* Logika tambah KPI Factor */}
            {Array.from({ length: result.kpiFactorsCount }, (_, i) => (
              <React.Fragment key={i}>
                <tr>
                <td
                  rowSpan={
                    2 +
                    (result.kpiFactors[i].statusRows
                      ? result.kpiFactors[i].statusRows.length
                      : 0)
                  }
                >
                  <input type="text" />
                  <div className="status"> 
                  <button
                    className="add-status-button"
                    onClick={() => handleAddStatusForFactor(result.id, i)}
                  >
                    + Status
                  </button>
                  <button
                    className="remove-status-button"
                    onClick={() => handleRemoveStatusForFactor(result.id, i)}
                  >
                    - Status
                  </button>
                  </div>
                </td>
                  <td>
                    <div className="kpi-factor-status">Plan</div>
                  </td>
                  <td
                    rowSpan={
                      2 +
                      (result.kpiFactors[i].statusRows
                        ? result.kpiFactors[i].statusRows.length
                        : 0)
                    }
                  >
                    <input type="text" />
                  </td>
                  <td
                    rowSpan={
                      2 +
                      (result.kpiFactors[i].statusRows
                        ? result.kpiFactors[i].statusRows.length
                        : 0)
                    }
                  >
                    <input type="text" />
                  </td>

                  {months.map((_, index) => (
                    <td key={index}>
                      <input type="number" />
                    </td>
                  ))}
                </tr>
                <tr>
                  <td>
                    <div className="kpi-factor-status">Actual</div>
                  </td>
                  {months.map((_, index) => (
                    <td key={index}>
                      <input type="number" />
                    </td>
                  ))}
                </tr>
                {/* Tambahkan baris baru untuk "New Status" */}
                {result.kpiFactors[i].statusRows.map((statusRow) => (
                  <tr key={statusRow.id}>
                    <td>New Status</td>
                    {months.map((_, index) => (
                      <td key={index}>
                        <input type="number" />
                      </td>
                    ))}
                  </tr>
                ))}
              </React.Fragment>
            ))}
          </React.Fragment>
        ))}
      </tbody>
    </table>
  );
};

export default EnvironmentTable;
